git回顾：
git是分布式的，本地有所有的版本控制信息，一个坏了可以用别人的修复。
	版本基于快照的，一个版本更新时会对当前的全部文件制作一个快照并保存，如果没有修改，只会链接到之前存储的文件。
svn是集中式的，版本信息都在远程机器上，远程的坏了就都没了，本地只有自己修改的东西。
	版本基于增量式，每个版本只保存这个版本修改的一点点东西，节约空间，完整内容需要和之前的历史记录加在一起。

工作区：写代码的地方
暂存区：临时存储
本地库：历史版本

流程：
工作区-->git add-->暂存区-->git commit-->本地库

代码托管中心：github，码云等

本地库和远程库：一个在本地，一个在远程，本地库通过push操作推送到远程

本地库和远程库的操作方式：
	1、A创建的远程库，B有权限push，直接push即可（一般团队内部协作可用这种）
	2、A创建的远程库，B没有权限push，因为太暴力（跨团队协作可用这种）
		1、B可以从A的远程库上fork一个库到B自己的远程库中，此时B的这个远程库属于他自己，B有完全的权限，可push
		2、B发起pull request，A可以审核再merge这个pull request到A自己的远程，这样什么代码merge由A控制
		
操作：
本地库初始化：git init
设置签名：形式：
		用户名：xxx
		Email：xxx@yy.com
	作用：区分不同开发人员的身份，内容无所谓，和远程库的账号没有半毛钱关系
	
设置签名命令：
	签名级别：
		1、项目级别/仓库级别：仅在当前本地库范围内有效，保存在.git/config中
			设置命令：	git config user.name xxx
					git config user.email xxx@yy.com
		2、系统用户级别：登录当前操作系统的用户范围，cd ~ 当前用户家目录下的.gitconfig中
			设置命令：	git config --global user.name xxx
					git config --global user.email xxx@yy.com
			1、如果都有，就近原则，项目级别优先于系统级别，项目级别有就用项目级别的
			2、如果都没有是不允许的
	查看签名：	git config user.name
			git config user.email

===========================================初次接触================================================

第一次使用提交时：
	查看状态：git status
	
	从工作区添加指定文件到暂存区：git add test.txt
	从工作区添加指定文件到暂存区：git add .
	
	从暂存区撤回指定文件：git rm --cached test.txt
	从暂存区撤回所有文件：git rm --cached -r .
	
	从缓存区提交到本地库：git commit good.txt 进入提交信息界面，写入信息然后退出即提交成功了
	也可以不add，直接commit：git commit -a good.txt 

之后使用：
	改变文件后 git status还是提示有文件更新了没add状态
	此时：1、git add test.txt还是将文件从工作区提交到暂存区
			1、提交到暂存区后git reset test.txt可以将该文件回退到工作区，内容不会改变
			2、 git commit . -m '内容2' 可以直接输入内容提交而不必打开vim编辑器输入内容
		2、git checkout -- test.txt将使得test.txt文件回退到未改变状态，内容回退到之前的

显示git日志：
	git log显示普通格式的日志
	git log --pretty=oneline 一次提交日志在一行显示
	git log --oneline 也是一行显示一次提交，hash值简写了
	git reflog 比log多了一些说明信息 如：bacfa35 HEAD@{1}: commit: 消息3 HEAD后面有HEAD指针需要移动的步数
	
HEAD版本回退前进
	根据版本hash值回退前进：	git reset --hard 9eb0ddd （一般用这个）
	使用^符号（只能回退）：	git reset --hard HEAD^ （几个^就回退几个版本）
	使用~符号（只能回退）：	git reset --hard HEAD~3 （数字代表回退几个版本）
	
reset命令的三个参数对比
	git reset --hard：在本地库移动HEAD指针，也会重置工作区和暂存区
	git reset --mixed：在本地库移动HEAD指针，也会重置暂存区（默认参数）
	git reset --soft：仅仅在本地库移动HEAD指针
	
永久删除文件（已经提交到本地库了）怎么找回（前提：之前存在时有提交到本地库）	
	回退版本

永久删除文件（只是将这一改变添加到暂存区）怎么找回（前提：之前存在时有提交到本地库）
	git reset --hard HEAD 其实还是用了hard参数，使得工作区和暂存区和当前指针保持一致

比较文件的不同，不带文件名就会比较所有的文件
	工作区和暂存区的比较：git diff test.txt
	工作区和本地库的比较：git diff HEAD test.txt 和当前HEAD比较，若要和历史比较，将HEAD换成hash版本号即可
	
=========================================分支===============================================

查看分支：git branch -v
创建分支：git branch dev
切换分支：git checkout dev
合并分支：比如master合并dev，则要先切换到master分支。
	1、切换分支：	git checkout master
	2、合并：		git merge dev

合并分支出现冲突：
	如果不同分支改动了同一个位置，合并会出现：CONFLICT (content): Merge conflict in test.txt
	此时会进入处理冲突的状态，(master|MERGING)
		<<<<<<< HEAD
		FFFFFFF master
		=======					出现冲突会有标识，这之上的是当前分支的修改，之下是dev修改的内容，此处有冲突
		FFFFFFF dev
		>>>>>>> dev
	手动处理冲突后，还是和之前一样 add commit即可取消MERGING状态，此时commit不能带文件名，当然日志还是需要的，git commit -m 'merge result'
	
=========================================git基本原理=========================================
	
哈希：
	哈希是一个系列的加密算法，各个不同的哈希算法虽然加密长度不同，但是有以下的共同点：
		1、不管输入数据的数据量有多大，输入同一个哈希算法，加密长度固定，如md5，是16个字节
		2、哈希算法确定，输入数据确定，输出数据能够保证不变
		3、哈希算法确定，输入数据有变化，输出数据一定有变化，且变化很大
		4、哈希算法不可逆
	git底层采用的是SHA-1算法
	哈希算法可以用来验证文件，
	
git保存版本的机制：基于快照
	1、一个版本中每个文件都有一个hash值，
	2、所有文件构成一个数对象，数对象也有一个hash值，
	3、数对象和提交的信息（作者，信息等）生成另一个hash值，这个hash值就是我们见到的HEAD的那个值
	
每一个版本中有一个parent的hash值，对应上一个版本的hash值，构成一条链，文件版本管理就是一个链条
	
每创建一个分支就是将这个分支的指针指向一个版本，如下：
									    HEAD
										  ↓
									    master
										  ↓
	98ca5<---55js9<---98jk0<---f30sj<---ff98i
										  ↑
									     dev
												 
							   master
								 ↓
	98ca5<---55js9<---98jk0<---f30sj<---ff98i
										  ↑
									     dev
										  ↑
									     HEAD	
	
=========================================和远程库如github的操作=========================================
查看本地库中的远程库：	git remote -v
添加和远程库的关联：    	git remote add origin https://github.com/xw1900/gittest.git  将地址起个别名origin放在本地，下次提交可直接用此名字提交
	1、此时 git remote -v 本地会有两个：
		1、用于取回：origin  https://github.com/xw1900/gittest.git (fetch)
		2、用于提交：origin  https://github.com/xw1900/gittest.git (push)
将本地库当前分支提交到远程库：git push origin master
	
克隆：git clone https://github.com/xw1900/gittest.git
	git clone效果：
		1、完整的把远程库下载到本地
		2、创建origin远程地址别名
		3、初始化本地库
	 
另一个人是可以克隆的，但是在没有加入团队之前是不能push的，可以fork再pull request的方式提交

拉取：
	1、git pull origin master：是两个操作的集合，fetch+merge，就是先把远程的改变拉取到本地如origin/master，然后再从origin/master合并到本地的master
		git branch -r：本地可以查看远程的分支
		1、git fetch：拉取远程分支的改变到本地的远程分支，使得可以在本地查看远程分支的改变
		2、git merge origin/master：和远程的master分支合并内容
	
推送：git push 之前如果远程库有改变则必须先要 git pull才行
	
fork：没有在别的项目团队中，push不了，可以采用fork的形式，
		相当于将项目复制一个到自己的账号下就有了所有的权限，然后需要提交时，
		先在自己的项目中push，再发起pull request即可，那边接受了就相当于push了	
	
	
=========================================eclipse操作git=========================================
kelper版本中仓库地址和工作空间地址不能在同一个，不然导入会有问题，后续版本有解决	
	
	
	
	
	
	
	
	
	
	
	