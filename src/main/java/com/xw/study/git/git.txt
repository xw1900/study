git回顾：
git是分布式的，本地有所有的版本控制信息，一个坏了可以用别人的修复。
svn是集中式的，版本信息都在远程机器上，远程的坏了就都没了，本地只有自己修改的东西。

工作区：写代码的地方
暂存区：临时存储
本地库：历史版本

流程：
工作区-->git add-->暂存区-->git commit-->本地库

代码托管中心：github，码云等

本地库和远程库：一个在本地，一个在远程，本地库通过push操作推送到远程

本地库和远程库的操作方式：
	1、A创建的远程库，B有权限push，直接push即可（一般团队内部协作可用这种）
	2、A创建的远程库，B没有权限push，因为太暴力（跨团队协作可用这种）
		1、B可以从A的远程库上fork一个库到B自己的远程库中，此时B的这个远程库属于他自己，B有完全的权限，可push
		2、B发起pull request，A可以审核再merge这个pull request到A自己的远程，这样什么代码merge由A控制
		
操作：
本地库初始化：git init
设置签名：形式：
		用户名：xxx
		Email：xxx@yy.com
	作用：区分不同开发人员的身份，内容无所谓，和远程库的账号没有半毛钱关系
	
设置签名命令：
	签名级别：
		1、项目级别/仓库级别：仅在当前本地库范围内有效，保存在.git/config中
			设置命令：	git config user.name xxx
					git config user.email xxx@yy.com
		2、系统用户级别：登录当前操作系统的用户范围，cd ~ 当前用户家目录下的.gitconfig中
			设置命令：	git config --global user.name xxx
					git config --global user.email xxx@yy.com
			1、如果都有，就近原则，项目级别优先于系统级别，项目级别有就用项目级别的
			2、如果都没有是不允许的
	查看签名：	git config user.name
			git config user.email
	 
第一次使用提交时：
	查看状态：git status
	
	从工作区添加指定文件到暂存区：git add test.txt
	从工作区添加指定文件到暂存区：git add .
	
	从暂存区撤回指定文件：git rm --cached test.txt
	从暂存区撤回所有文件：git rm --cached -r .
	
	从缓存区提交到本地库：git commit good.txt 进入提交信息界面，写入信息然后退出即提交成功了
	也可以不add，直接commit：git commit -a good.txt 

之后使用：
	改变文件后 git status还是提示
	git checkout test.txt





