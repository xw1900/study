spring-web的jar包下 META-INF/services/javax.servlet.ServletContainerInitializer下：
org.springframework.web.SpringServletContainerInitializer
这是spring-web实现的方式
源码可知：只需要关注WebApplicationInitializer及其子类即可
会依次调用WebApplicationInitializer.onStartup方法
for (WebApplicationInitializer initializer : initializers) {
	initializer.onStartup(servletContext);
}

WebApplicationInitializer
	-->AbstractContextLoaderInitializer -->  创建根容器：createRootApplicationContext()
		-->AbstractDispatcherServletInitializer -->  创建web的根容器：createServletApplicationContext();
			创建了 DispatcherServlet(servletAppContext);并添加到ServletContext中
			getServletMappings()
			-->AbstractAnnotationConfigDispatcherServletInitializer
			根容器配置类：getRootConfigClasses();
			web容器配置类：getServletConfigClasses();

所以可以继承AbstractAnnotationConfigDispatcherServletInitializer的方式来实现基于servlet3的springmvc开发



如上所述，
**************************************spring初始化前****************************************
	1、tomcat初始化时，会调用AbstractDispatcherServletInitializer的onStartup方法
		@Override
		public void onStartup(ServletContext servletContext) throws ServletException {
			super.onStartup(servletContext);
			registerDispatcherServlet(servletContext);
		}
	2、调用父类的onStartup方法，-->registerContextLoaderListener(servletContext);					【spring容器】
		1、createRootApplicationContext();返回一个AnnotationConfigWebApplicationContext对象			【父容器】
		2、ContextLoaderListener listener = new ContextLoaderListener(rootAppContext);关键的一步
			1、创建一个ContextLoaderListener，用于spring容器初始化，会在tomcat容器初始化的时候调用
		3、servletContext.addListener(listener);添加进tomcat容器中
	3、registerDispatcherServlet(servletContext);												【springmvc容器】
		1、createServletApplicationContext();创建一个AnnotationConfigWebApplicationContext对象		【子容器】
		2、createDispatcherServlet(servletAppContext);创建一个DispatcherServlet
		3、servletContext.addServlet(servletName, dispatcherServlet);将servlet添加进tomcat容器
		4、设置setLoadOnStartup，添加匹配addMapping
		5、getServletFilters();注册过滤器
**************************************spring初始化前****************************************		

**************************************spring容器初始化****************************************
spring容器初始化是在springmvc容器之前的，前提是配置了rootConfig，不然是不会有ContextLoaderListener存在的
	4、ContextLoaderListener实现了ServletContextListener，可以监听tomcat的开启和关闭
	5、contextInitialized 方法监听tomcat开启，调用其中的initWebApplicationContext
	6、ContextLoaderListener继承了ContextLoader，调用ContextLoader.initWebApplicationContext
		1、如果context为空，会创建一个，在初始化前是有一个AnnotationConfigWebApplicationContext对象存在的
		2、调用configureAndRefreshWebApplicationContext(cwac, servletContext);
			1、ConfigurableWebEnvironment
			2、WebApplicationContextUtils.initServletPropertySources(getPropertySources(), servletContext, servletConfig);初始化web的配置参数
			3、wac.refresh();这里就来到了前面说到的spring初始化的流程了，依托于getRootConfigClasses返回的 【rootConfig】 类配置
**************************************spring容器初始化****************************************

springmvc容器初始化在spring容器初始化之后
	
**************************************springmvc容器初始化****************************************
spring容器初始化后才会到springmvc容器的初始化，因为tomcat容器中servlet初始化是在listener之后的，HttpServletBean的init()方法
	7、init()方法中调用 initServletBean()
	8、initServletBean()中调用initWebApplicationContext();
	9、和spring中初始化一样，configureAndRefreshWebApplicationContext(cwac);
		1、ioc容器启动会刷新容器，refresh();
		2、refresh();中调用invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactory后置处理器
		3、Spring有一个内部的BeanFactory：
		    internalConfigurationAnnotationProcessor，类型为ConfigurationClassPostProcessor。
		4、而且是实现了PriorityOrdered，优先级很高的后置处理器
		5、排序好之后执行 invokeBeanDefinitionRegistryPostProcessors。
		6、执行ConfigurationClassPostProcessor的postProcessBeanDefinitionRegistry方法
		7、执行方法 processConfigBeanDefinitions(registry);
		8、解析每一个标有@Configuration的类
		9、调用 parser.parse(candidates);
		10、parse中一直会调到 doProcessConfigurationClass
		11、会去@ComponentScan("")中的路径下扫描包，将@ComponentScan下的所有参数，如useDefaultFilters等都解析出来
		12、最终会调到ComponentScanAnnotationParser的doScan(String... basePackages)方法
			1、会解析路径：得到：classpath*:com/xw/study/springmvc/controller/**/*.class，这里也可以知道，会扫描路径下的所有，包括子包
			2、会得到该路径下所有的的类，依次一系列判断，如有没有在includeFilters中，有没有@Controller注解等
		13、AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);
			会处理一些其他逻辑，primary，Lazy等
		14、之后会检查候选的 checkCandidate(beanName, candidate)，此处会检查有没有重复注册bean，有会报错	
			重复注册的bean也有区别，如果是@Component之类的注解，重复bean会报冲突的错
			如果是@Bean注册的，则只会覆盖。
		15、接着会处理@Import的，processImports();此时如果有@EnableWebMvc，就会在此时工作，导入一个bean
			也就是先扫描@ComponentScan，再@Import
		。。。。。。。。。。。。
**************************************springmvc容器初始化****************************************

**************************************AppConfig初始化过程****************************************
注意：栈的先进后出
1、扫描@ComponentScans，@ComponentScan包中内容
	1、扫描包如果有多个则for循环扫描
	2、找到所有的class
	3、遍历找到的所有的class，看是否是excludeFilters，是不是需要加入到容器。
	4、各种判断Conditional
	5、得到过滤后的bean定义信息set集合，遍历
	6、遍历过程也是各种判断，Lazy，Primary，DependsOn，Role等等等
	7、遍历完后加入到bean定义信息集合中。
	8、将刚刚加入到bean定义信息集合中的再遍历，再重新执行第一步（有可能刚才的bean中有配置类，还需要扫描，递归处理（包括下面的所有步骤））
	9、递归完后继续往下走，这里才开始处理@Import注解
		1、如果有@Import，将以此类作为配置类重新走一遍appconfig的逻辑，从processConfigurationClass开始（优于下面的第10步先执行）
	10、处理该类中的@Bean，注意：不包括父类的，父类中的是这个类执行完后如果有父类，再分开处理
	
appConfig先处理@ComponentScan，再处理@Import，再处理类中的@Bean，再以相同的步骤处理父类
注意此处代码：
		if (sourceClass.getMetadata().hasSuperClass()) {
			String superclass = sourceClass.getMetadata().getSuperClassName();
			// 如果父类已经在别处初始化了，则不会初始化了，这就是为什么@EnableWebMvc不能和 extends WebMvcConfigurationSupport 一起用的原因
			if (!superclass.startsWith("java") && !this.knownSuperclasses.containsKey(superclass)) {
				this.knownSuperclasses.put(superclass, configClass);
				// Superclass found, return its annotation metadata and recurse
				return sourceClass.getSuperClass();
			}
		}
**************************************AppConfig初始化过程****************************************



