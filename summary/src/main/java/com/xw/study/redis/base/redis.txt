CAP原则是NOSQL数据库的基石。Consistency（一致性）。 Availability（可用性）。Partition tolerance（分区容错性）
















###########################################安装###########################################
	tar zxvf redis-4.0.10.tar.gz  解压
	make 编译
	软连接 redis->redis-4.0.10
###########################################安装###########################################

###########################################配置###########################################	
为便于管理，将redis的配置文件和启动文件分开管理
mkdir -p /usr/local/redis/bin   启动文件
mkdir -p /usr/local/redis/etc   配置文件
	然后将之前make install 到/usr/local/bin中的redis启动文件（6个）复制到新建的bin目录下
	将redis.conf配置文件也复制到etc目录下
	
配置：
	后台启动：daemonize yes
	
关于dump.rdb 位置 ：
如果启动服务的时候不指定redis.conf配置文件，那么默认的配置文件的dump.rdb存储位置为你当前之前启动服务的位置，
如果你在usr中调用的redis.server（注意是调用的目录，不是redis.server的目录），那么你关闭服务时，dump.rdb就会存储在usr目录下。
所以建议是指定配置文件启动，并且配置文件中指定dump.rdb存储位置
	
更改pid目录为etc目录
更改dump.rdb文件目录为etc目录
更改绑定ip，不然win连不上	bind 192.168.1.100
启动redis服务，进入/usr/local/redis下：./bin/redis-server ./etc/redis.conf
###########################################配置###########################################

###########################################使用###########################################
config:可以在命令行中获取redis.conf中的配置项
	格式：config get 具体的配置名
	例如：config get bind   获取绑定的ip

string（字符串）二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。一个键最大能存储512MB。
	例如：SET name "runoob"
	
hash（哈希）是一个键值(key=>value)对集合。是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。每个 hash 可以存储 232 -1 键值对（40多亿）。
	例如：HMSET myhash field1 "Hello" field2 "World"		HGET myhash field1
	
list（列表）简单的字符串列表，按照插入顺序排序.  可以添加一个元素到列表的头部（左边）或者尾部（右边）。
	底层实际是个链表

set（集合）string类型的无序集合.通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。集合内元素的唯一性，第二次插入的元素将被忽略。不允许重复
	通过HashTable实现实现
	例如：sadd key member
	
zset(sorted set：有序集合)。string类型元素的集合,且不允许重复的成员。
	每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。

基本操作：
	客户端登录: 	
		redis-cli -h host -p port -a password
	删除: 		
		del key	-->返回被删除的数量
	检查是否存在: 	
		exists key	--> key 存在返回 1 ，否则返回 0
	设置过期时间: 	
		expire key 2
	设置到期时间: 	
		expireat key 时间戳
	设置过期时间(毫秒): 
		pexpire key 2000
	查找符合模式的key: 
		keys pattern
	查看剩余生存时间: 
		ttl key	-->-1:未设置过时间	-2:已过期	
	key的类型: 
		type key
	随机选一个key: 
		randomkey
	重命名: 
		rename key newkey  -->如果newkey已存在，会覆盖newkey的内容
	newkey不存在重命名: 
		renamenx key newkey

String操作：操作的不是String，返回错误
	设置键值对: 
		set myKey abc   -->未设置过期时间，ttl是-1，不会过期。。。设置了expire，超过了时间会过期。
	取出键值对: 
		get myKey		-->key不是字符串，返回错误
	获取范围: 
		getrange key 1 3	-->包括 start 和 end 在内
	设置值返回旧值: 
		getset key value	-->没有旧值返回null
	查找多个key: 
		mget test test2		-->key不存在返回null
	设置值和过期时间: 
		setex key 4 value		
	key不存在时设置: 
		setnx key value
	设置key范围值: 
		setrange key1 6 "Redis"
	返回value的长度: 
		strlen key
	value值+1: 
		incr key
		如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行 INCR 操作。
		如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。
		本操作的值限制在 64 位(bit)有符号数字表示之内。
	value值-1: 
		decr key
	value值+指定值: 将 key 中储存的数字加上指定的增量值
		incrby key num
	value值-指定值: 
		decrby key num
	追加: 
		append key value

hash操作：
	删除：hdel key value1 value2..
	设置：hset key key value
	获取：hget key key
	。。。。操作和String类似

list操作：
	一个或多个key插入到头部：lpush key value		->key不存在则创建
	一个或多个key插入到尾部：rpush key value		->key不存在则创建
	一个或多个key插入到头部：lpushx key valye		->key不存在则无效
	一个或多个key插入到尾部：rpushx key valye		->key不存在则无效
	移除并获取第一个元素，没有则阻塞：blpop key timeout	->timeout=0时一直阻塞
	移除并获取最后一个元素，没有则阻塞：brpop key timeout	->timeout=0时一直阻塞	
	移除并获取第一个元素：lpop key
	移除并获取最后一个元素：rpop key
	获取列表长度：llen key
	获取指定范围元素：lrange key 0 1
	根据所有获取元素：lindex key 0
	元素前或者后插入元素:linsert key before|after pivot value
	
###########################################使用###########################################
	
redis的删除机制：
	Redis无论有没有设置expire，他都会遵循redis的配置好的删除机制，在配置文件里设置：
	redis最大内存不足"时,数据清除策略,默认为"volatile-lru"。
	volatile-lru	->对"过期集合"中的数据采取LRU(近期最少使用)算法.如果对key使用"expire"指令指定了过期时间,那么此key将会被添加到"过期集合"中。
						将已经过期/LRU的数据优先移除.如果"过期集合"中全部移除仍不能满足内存需求,将OOM.
	allkeys-lru		->对所有的数据,采用LRU算法
	volatile-random	->对"过期集合"中的数据采取"随即选取"算法,并移除选中的K-V,直到"内存足够"为止. 如果如果"过期集合"中全部移除全部移除仍不能满足,将OOM
	allkeys-random	->对所有的数据,采取"随机选取"算法,并移除选中的K-V,直到"内存足够"为止
	volatile-ttl	->对"过期集合"中的数据采取TTL算法(最小存活时间),移除即将过期的数据.
	noeviction		->不做任何干扰操作,直接返回OOM异常
	另外，如果数据的过期不会对"应用系统"带来异常,且系统中write操作比较密集,建议采取"allkeys-lru"。
	由以上可以看出，对没设置expire的数据，产生影响的是allkeys-lru机制。
	所以redis没设置expire的数据是否会删除，是由你自己选择的删除机制决定的。


