数据库：数据的仓库
数据库管理系统：管理数据的系统，mysql，oracle，sql server，db2
sql：操作数据的语言

数据库相关概念
	1、DB：数据库，保存一组有组织的数据的容器
	2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据
	3、SQL:结构化查询语言，用于和DBMS通信的语言

数据库存储数据的特点
	1、将数据放到表中，表再放到库中
	2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。
	3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。
	4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”
	5、表中的数据是按行存储的，每一行类似于java中的“对象”。

MySQL服务的启动和停止
	方式一：计算机——右击管理——服务
	方式二：通过管理员身份运行
	net start 服务名（启动服务）
	net stop 服务名（停止服务）

MySQL服务的登录和退出   
	方式一：通过mysql自带的客户端 	只限于root用户

	方式二：通过windows自带的客户端
		登录：
		mysql 【-h主机名 -P端口号 】-u用户名 -p密码

	退出：
	exit或ctrl+C


MySQL的常见命令 
	1.查看当前所有的数据库 	show databases;
	2.打开指定的库 	use 库名
	3.查看当前库的所有表 	show tables;
	4.查看其它库的所有表 	show tables from 库名;
	5.创建表
	create table 表名(

		列名 列类型,
		列名 列类型，
		。。。
	);
	6.查看表结构 	desc 表名;

	7.查看服务器的版本
	方式一：登录到mysql服务端 	select version();
	方式二：没有登录到mysql服务端 	mysql --version 或  mysql --V


MySQL的语法规范
	1.不区分大小写,但建议关键字大写，表名、列名小写
	2.每条命令最好用分号结尾
	3.每条命令根据需要，可以进行缩进 或换行
	4.注释
		单行注释：#注释文字
		单行注释：-- 注释文字
		多行注释：/* 注释文字  */
	
	
SQL的语言分类
	DQL（Data Query Language）：数据查询语言 				select 
	DML(Data Manipulate Language):数据操作语言 			insert 、update、delete
	DDL（Data Define Languge）：数据定义语言 				create、drop、alter
	TCL（Transaction Control Language）：事务控制语言 		commit、rollback
	
DQL语言的学习
进阶1：基础查询
	语法： SELECT 要查询的东西 【FROM 表名】;
	类似于Java中 :System.out.println(要打印的东西);
	特点：
	①通过select查询完的结果 ，是一个虚拟的表格，不是真实存在
	② 要查询的东西 可以是常量值、可以是表达式、可以是字段、可以是函数
	
	别名：如果有空格，需要''，如：select name as 'haha hehe' 
	+号：
		两个操作数都为数值型，则做加法运算，
		其中一方为字符型，试图将字符型数值转换成数值型，
			如果转换成功，继续做加法运算，如：'123'+50=173
			如果转换失败，则将字符串数值转换为0，如：'haha'+50=50	
		其中一方为null，则结果一定为null，如：null+10=null
	null和任何数据操作都为null
	ifnull(user_id,0) as userId：判断user_id是否为null，如果为null设置为0
	concat：连接，concat('a','b','c') as result=abc
	isnull：isnull(user_Id)，是null返回1，不是返回0

进阶2：条件查询
	条件查询：根据条件过滤原始表的数据，查询到想要的数据
	语法：
		select 
			要查询的字段|表达式|常量值|函数
		from 
			表
		where 
			条件 ;
	
	如上的执行顺序：1、表	 2、条件	3、查询列表
		
	分类：
	一、条件表达式
		示例：salary>10000
		条件运算符： > < >= <= = != <>
	
	二、逻辑表达式
	示例：salary>10000 && salary<20000
	
	逻辑运算符：连接条件表达式
		and（&&）:两个条件如果同时成立，结果为true，否则为false
		or(||)：两个条件只要有一个成立，结果为true，否则为false
		not(!)：如果条件成立，则not后为false，否则为true

	三、模糊查询  like， between and， in， is null，is not null
		like：也可判断数值型
			%：任意多个字符，包含0个字符
			_：任意单个字符
				转义字符：例：转义第二个_
					1、\  like '_\_%'
					2、定义一个转义字符：like '_$_%' escape '$' 即告诉mysql，$是转义字符
		between and：
			between 100 and 120  包含临界值，等价于   >= and <=
		in：
			列表值类型必须一致或兼容
		is null：只能判断null值
			如：name is null
			= <> 不能用于判断null值，会返回null值
			is null 和 is not null可以判断null值
		安全等于<=>：判断是否等于，等于返回true，可以判断null值，会返回true或false
		
进阶3：排序查询
	语法：数字：执行顺序
		select 要查询的东西		3	
		from 表				1
		where 条件			2
		order by 排序的字段		4
			|表达式|函数|别名 【asc（升序，默认）|desc（降序）】，支持单个字段，多个字段，表达式，函数，别名
			一般放到查询语句最后面，limit除外
		
		LENGTH()：函数，长度
		sql中索引从1开始

进阶4：常见函数
	一、单行函数
		1、字符函数
			concat拼接
			length 获取字节个数，注意是字节个数
			substr截取子串
				substr('',7)：从第七位开始截取
				substr('',1,3)：从第一位开始截取，截取3个字符
			instr返回子串第一次出现的索引，如果找不到返回0
				instr('','')：第二个参数使子串
			upper转换成大写
			lower转换成小写
			trim去前后指定的空格或字符
				trim('a' from 'aaabbbaaa')：指定要去掉的字符，返回bbb
			ltrim去左边空格
			rtrim去右边空格
			replace替换
				replace('我爱你','你','她')：返回我爱她
			lpad左填充
				lpad('aaa',5,'b')，用指定的字符实现左填充指定长度，就是填充到指定倡导。长度小了会截断，返回bbaaa
			rpad右填充
		2、数学函数
			round 四舍五入
				round(-1.55)：返回-2
				round(1.567,2)：返回1.57，小数点后返回两位
			rand 随机数
			floor向下取整
			ceil向上取整，返回>=该参数的最小证书
				ceil(1.002)：2
				ceil(-1.002)：-1 
			mod取余
			truncate截断，小数点后保留几位
				truncate(1.69999,1)：1.6
		3、日期函数
			now当前系统日期+时间
			curdate当前系统日期，不包含时间
			curtime当前系统时间，不包含日期
			str_to_date 将字符转换成日期
			date_format将日期转换成字符
			YEAR(NOW()) 返回年
				YEAR('1998-1-1') 返回年，1998
			MONTH：月
			MONTHNAME：英文月
			DAY...
			str_to_date：将日期格式的字符串转换成指定格式的日期
				str_to_date('1998-3-2','%Y-%c-%d')：返回1998-03-02 
			date_format：将日期转换成字符
				date_format('2018/6/6','%Y年%m月%d日')：返回2018年06月06日
		4、流程控制函数
			if 处理双分支
				if(10>5,'y','n')：第一个成立返回第二个值，否则返回第三个
			
			case：
				1、判断是否等于某个值，如下：判断常量是否等于常量1或者常量2
					case 常量
						when 常量1 then 要显示的值或语句
						when 常量2 then 要显示的值或语句
						else 要显示的值或语句
						end
					
				2、判断是不是在某个区间，如下：判断是否在条件1或者条件2的区间内
					case
						when 条件1 then 要显示的值或语句
						when 条件2 then 要显示的值或语句
						else 要显示的值或语句
						end
			
		5、其他函数
			version版本
			database当前库
			user当前连接用户

	二、分组函数
		sum 求和
		max 最大值
		min 最小值
		avg 平均值
		count 计数
	
		特点：
			1、以上五个分组函数都忽略null值，除了count(*)
			2、sum和avg一般用于处理数值型
				max、min、count可以处理任何数据类型
		    3、都可以搭配distinct使用，用于统计去重后的结果
			4、count的参数可以支持：
				字段、*、常量值，一般放1
			5、和分组函数一同查询的字段要求是group by后的字段
		
			   建议使用 count(*)：一行中只要有一个不为null就会统计上
			   
			   如果count(user_id)：这样写，如果某行中user_id等于null，那这一行就不会统计上
			   count(1)：相当于在表中加了一列，值全部为1，然后统计，自然就会是行数，和count(*)一样
			   效率：
			   	MYISAM存储引擎下，count(*)的效率高
			   	INNODB存储引擎下，count(*)和count(1)的效率差不多，比count(字段)要高一些，count(字段)还需要去判断该字段是否为null

进阶5：分组查询
	语法：
	select 查询的字段，分组函数	5		
	from 表					1
	where 筛选条件				2
	group by 分组的字段			3
	having 分组后的排序			4
	order by 排序的字段			6
	
	注意：
		查询列表比较特殊，要求是分组函数和group by后出现的字段
	特点：
		2、和分组函数一同查询的字段最好是分组后的字段
		3、分组筛选
				针对的表	位置			关键字
			分组前筛选：	原始表		group by的前面		where
			分组后筛选：	分组后的结果集	group by的后面		having
			
			分组函数做条件肯定是放在having子句中的
			能用分组前筛选的，就优先考虑使用分组前where筛选
			
		4、可以按单个字段分组，也可以按多个字段分组，字段之间用逗号隔开
		5、可以支持排序
		6、having后可以支持别名
 
进阶6：多表连接查询

	笛卡尔乘积：如果连接条件省略或无效则会出现
	解决办法：添加上有效的连接条件
	分类：
		按年代分类：
			sql92标准：仅仅支持内连接
			sql99标准【推荐】：支持内连接+外链接（左外+右外）+交叉连接
		按功能分类：
			内连接
				等值连接
				非等值连接
				自连接
			外链接
				左外连接
				右外连接
				全外链接
			交叉连接
	如果为表起了别名，则查询的字段不能使用原来的表名去限定
	
一、传统模式下的连接 ：等值连接——非等值连接
	1.等值连接的结果 = 多个表的交集
	2.n表连接，至少需要n-1个连接条件
	3.多个表不分主次，没有顺序要求
	4.一般为表起别名，提高阅读性和性能
	5.可以搭配签名的所有子句使用，比如排序，分组，筛选
	 
二、sql99语法：通过join关键字实现连接

	含义：1999年推出的sql语法
	支持：
		等值连接、非等值连接 （内连接）
		外连接
		交叉连接
	
	语法：
		select 字段，...
		from 表1
		【inner|left outer|right outer|cross】join 表2 on  连接条件
		【inner|left outer|right outer|cross】join 表3 on  连接条件
		【where 筛选条件】
		【group by 分组字段】
		【having 分组后的筛选条件】
		【order by 排序的字段或表达式】
	
	好处：语句上，连接条件和筛选条件实现了分离，简洁明了！

三、自连接
	案例：查询员工名和直接上级的名称：
		sql92：
			SELECT e.last_name,m.last_name
			FROM employees e,employees m 
			WHERE e.`manager_id`=m.`employee_id`;
			
		sql99：
			SELECT e.last_name,m.last_name
			FROM employees e
			JOIN employees m ON e.`manager_id`=m.`employee_id`;

进阶7：子查询
	含义：
		一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询
		在外面的查询语句，称为主查询或外查询
	
	分类：
		按子查询出现的位置：
			select：仅仅支持标量子查询
			from：支持表子查询
			where或having：标量子查询，列子查询，行子查询
			exists：表子查询（相关子查询 ）
		按结果集的行列数不同
			标量子查询：结果集只有一行一列（单行子查询）
			列子查询：结果集只有一列多行（多行子查询）
			行子查询：结果集有一行多列
			表子查询：结果集一般为多行多列
	特点：
		1、子查询都放在小括号内
		2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧
		3、子查询优先于主查询执行，主查询使用了子查询的执行结果
		4、子查询根据查询结果的行数不同分为以下两类：
		① 单行子查询
			结果集只有一行
			一般搭配单行操作符使用：> < = <> >= <= 
			非法使用子查询的情况：
				a、子查询的结果为一组值
				b、子查询的结果为空
			 
		② 多行子查询
			结果集有多行
			一般搭配多行操作符使用：any、all、in、not in
			in： 属于子查询结果中的任意一个就行
			any和all往往可以用其他查询代替
	
进阶8：分页查询
应用场景：
	实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句
语法：
	select 字段|表达式,...			5
	from 表						1
	【where 条件】					2
	【group by 分组字段】			3
	【having 条件】				4
	【order by 排序的字段】			6	
	limit 【起始的条目索引，】条目数;	7
特点：
	1.起始条目索引从0开始
	2.limit子句放在查询语句的最后
	3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage
	假如:
	每页显示条目数sizePerPage
	要显示的页数 page

进阶9：联合查询
引入：
	union 联合、合并
语法：
	select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】
	select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】
	select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】
	.....
	select 字段|常量|表达式|函数 【from 表】 【where 条件】

特点：
	1、多条查询语句的查询的列数必须是一致的
	2、多条查询语句的查询的列的类型几乎相同
	3、union代表去重，union all代表不去重

DML语言

插入
	语法：
		insert into 表名(字段名，...)
		values(值1，...);
	特点：
		1、字段类型和值类型一致或兼容，而且一一对应
		2、可以为空的字段，可以不用插入值，或用null填充
		3、不可以为空的字段，必须插入值
		4、字段个数和值的个数必须一致
		5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致

修改
	修改单表语法：
		update 表名 set 字段=新值,字段=新值
		【where 条件】
	修改多表语法：
		update 表1 别名1,表2 别名2
		set 字段=新值，字段=新值
		where 连接条件
		and 筛选条件

删除
	方式1：delete语句 
		单表的删除： ★
			delete from 表名 【where 筛选条件】
		多表的删除：
			delete 别名1，别名2
			from 表1 别名1，表2 别名2
			where 连接条件
			and 筛选条件;
	方式2：truncate语句
		truncate table 表名

	两种方式的区别【面试题】
		1.truncate不能加where条件，而delete可以加where条件
		2.truncate的效率高一丢丢
		3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始
			delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始
		4.truncate删除不能回滚，delete删除可以回滚
		5.truncate删除没有返回值，delete删除有返回值

DDL语句
库和表的管理
库的管理：
	一、创建库
		create database if not exists 库名
	二、删除库
		drop database if exists 库名
表的管理：
	1.创建表
		CREATE TABLE IF NOT EXISTS stuinfo(
			stuId INT,
			stuName VARCHAR(20),//20个字符
			gender CHAR,
			bornDate DATETIME
		);
	
		DESC studentinfo;
	2.修改表 alter
		语法：ALTER TABLE 表名 ADD|MODIFY|DROP|CHANGE COLUMN 字段名 【字段类型】;
		①修改字段名
			ALTER TABLE studentinfo CHANGE  COLUMN sex gender CHAR;
		②修改表名
			ALTER TABLE stuinfo RENAME [TO]  studentinfo;
		③修改字段类型和列级约束
			ALTER TABLE studentinfo MODIFY COLUMN borndate DATE ;
		④添加字段
			ALTER TABLE studentinfo ADD COLUMN email VARCHAR(20) first;
		⑤删除字段
			ALTER TABLE studentinfo DROP COLUMN email;
	3.删除表
		DROP TABLE [IF EXISTS] studentinfo;
	4.复制表
		1、仅仅复制表的结构：
			create table copy like author
		2、复制表的结构和数据：
			create table copy2 select * from author
		3、只复制部分：
			上面添加条件即可
			
常见类型
	整型：
		整数类型		字节		范围
		Tinyint		1		有符号：-128~127 无符号：0~255
		Smallint	2		有符号：-32768~32767 无符号：0~65535
		Mediumint	3		有符号：-8388608~8388607 无符号：0~1677215
		Int/integer	4		有符号：-2147483648~2147483647 无符号：0~4294967295
		Bigint		8		有符号：-92233720368.。。。。。。
		
		如何设置无符号和有符号：
			默认都是有符号的，支持负数
			设置：创建表的时候添加限制   id INT unsigned  此时就不能插入负数了，插入负数默认为0
		存数据时，超过范围会存为临界值	
		如果不设置长度，会有默认的长度，这个长度只是显示的长度，不影响存数据时长度的限制（真正限制的是设置的整数的类型（int smallint等）），
			如果搭配了  id  int(7) zerofill这个限制（加了之后自动变为无符号），则长度不足7的时候会用0填充
	小数：
		浮点型
			浮点数类型			字节		范围
			float(M,D)		4		
			double(M,D)		8	
		定点型
			dec(M,D)/
			decimal(M,D)	8		最大范围和double相同，给定decimal的有效取值范围由M和D决定，精度比double高
			
		M和D：M：整数和小数加起来的长度		D：小数点的位数，不够0补充
			m和d都可以省略，float和double是根据插入的数值来决定的，decimal默认是(10,0)即默认无小数位
			
		选取原则：所选择的类型越简单越好，能保存数值的类型越小越好
	字符型：
		较短的文本：char varchar
			char(M)	m为0~255之间的整数，m可以省略，默认为1
			varchar(M) m为0~65535之间的整数
			char和varchar比较：
				char是固定长度的字符，比较耗费空间，效率高
				varchar是可变的长度的字符，比较节省空间，效率低一些
				使用：如果是固定的长度的，如性别男女，建议用char
					如果不是固定长度的，长度不确定，建议用varchar
		较长的文本：text blob（较长的二进制数据）
	日期型：
		类型			字节			最小值					最大值
		date		4			1000-01-01				9999-12-31
		datetime	8			1000-01-01 00:00:00		9999-12-31 23:59:59
		timestamp	4			19700101080001			2038年的某个时刻
		time		3			-838:59:59				838:59:59
		year		1			1901					2155
		
		区别：timestamp支持的时间范围较小
			timestamp和实际时区有关，更能反映实际的日期，datetime只能反映插入的当地时区
			timestramp的属性受mysql版本和sqlmode的影响很大
	Blob类型：

常见约束
	NOT NULL 非空，保证该字段的值不能为空
	DEFAULT 默认，保证该字段有默认值
	UNIQUE 唯一，用于保证该字段的值具有唯一性，可以为空
	CHECK mysql中不支持
	PRIMARY KEY 主键 保证该字段的值具有唯一性，并且非空
	FOREIGN KEY 外键 限制两个表的关系，保证该字段的值必须来自于主表的关联列的值
	
	添加约束的时机：
		创建表时
		修改表时
		
	约束的添加分类：
		列级约束：直接在建表时的列上添加 如：id int not null 之类的
			非空 默认 唯一 主键
		表级约束
			【constraint 约束名】 约束类型（字段名）
			约束名可以不取，默认是字段名
			除了默认，非空 其他的都支持
			如：constraint pk primary key(id) 主键，注意：mysql中主键名就是primary，设置了pk也没有用，其他数据库如sql server可以
				constraint uq unique(seat) 唯一
				constraint ck check(gender='nan' or gender = 'nv') 检查
				constraint fk_stuinfo_major foreign key(majorid) references major(id) 外键
				
		通用写法：外键用表级，其他的用列级。。。。如：
			create table if not exists stuinfo(
				id int primary key,
				name varchar(20) not null,
				sex char(1),
				age int default 18,
				seat int unique,
				majorid int,
				constraint fk_stuinfo_major foreign key(majorid) references major(id)
			)
			
		主键和唯一
			同：都可以保证唯一，都可以组合【不推荐】
				组合主键：多个列联合作为一个主键来保证【不推荐】
				组合唯一键：也是一样，多个列唯一才算唯一【不推荐】
			异：唯一不保证非空，主键保证
			 	唯一只能一个，非空可以多个列
			 	
		外键：1、要求在从表设置外键关系
			2、从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求
			3、主表的关联列必须是一个key（一般是主键或唯一）		
			4、插入数据时，先插入主表，再插入从表
			5、删除数据时，先删除从表，再删除主表
				如果硬要删除主表的数据呢？【很少用】
					1、级联删除：alter table stuinfo add constraint fk_stu_major foreign key(majorid) references major(id) on delete cascade
						此时删除主表的数据时，从表中外键引用该主表中的数据也会被删除。
					2、级联置空：alter table stuinfo add constraint fk_stu_major foreign key(majorid) references major(id) on delete set null
						此时删除主表中的数据时，从表中外键引用该主表中的数据的外键被会被设置为null
			
		修改表时添加约束：
			添加非空约束：alter table stuinfo modify column stuname varchar(20) not null
			添加默认约束：alter table stuinfo modify column age int default 18
			添加主键：alter table stuinfo modify column id int primary key
			添加唯一（表级约束写法）alter table stuinfo add unique(seat)
			添加外键：alter table stuinfo add constraint fk_stuinfo_major foreign key(majorid) references major(id)
		修改表时删除约束：
			删除非空约束：alter table stuinfo modify column stuname varchar(20) null
			删除默认约束：alter table stuinfo modify column age int
			删除主键：alter table stuinfo modify column id int
				alter table stuinfo drop primary key
			。。。。。。
			
		列级约束和表级约束：
			列级约束：在列的后面，语法都支持，但外键没有效果，不可以起约束名
			表级约束：所有列的下面，默认和非空不支持，其他的支持，可以起约束名（主键没有效果）
			
		标识列：又称为自增长列，
			可以不用手动的插入值，系统提供默认的序列值  auto_increment
			mysql中不支持设置起始值，步长可以设置
			特点：
				1、标识列不一定要和主键搭配，只要是key就可以
				2、标识列只能有一个
				3、标识列的类型只能是数值型
				4、标识列可以通过set auto_increment_increment = 3设置步长
			修改表时添加标识列：
				alter table xxx modify column id int primary key auto_increment;
				
数据库事务
	一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行
存储引擎：mysql中数据用各种不同的技术存储在文件或内存中，其实就是数据是用什么方式来存储的。
含义
	通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态
特点
	（ACID）
	原子性：要么都执行，要么都回滚
	一致性：保证数据的状态操作前和操作后保持一致
	隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰
	持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改

相关步骤：
	1、开启事务
	2、编写事务的一组逻辑操作单元（多条sql语句）
	3、提交事务或回滚事务

事务的分类：
隐式事务：没有明显的开启和结束事务的标志
	比如：insert、update、delete语句本身就是一个隐式事务，在该语句前后有自动开启和关闭事务

显式事务：具有明显的开启和结束事务的标志
	前提：必须先设置自动提交功能为禁用，即在开启显示事务的时候关闭隐式事务，这个关闭只在当前会话有效，不会导致以后也关闭隐式事务
		1、开启事务
			show variables like 'autocommit'
			取消自动提交事务的功能    set autocommit=0;
		2、编写事务的一组逻辑操作单元（多条sql语句）
			insert
			update
			delete
		3、提交事务或回滚事务
		
使用到的关键字
	set autocommit=0;		取消自动提交事务的功能
	start transaction;		开启事务，可选，set autocommit=0默认已经开始了事务
	commit;					正常时提交事务
	rollback;				异常时回滚事务
	
	savepoint  断点
		设置断点后，可自行回滚到指定断点，只能搭配rollback，不能搭配commit
	rollback to 断点

事务的隔离级别:
	事务并发问题如何发生？
		当多个事务同时操作同一个数据库的相同数据时
事务的并发问题有哪些？
	脏读：一个事务读取到了另外一个事务【未提交的】数据
		A事务读取了已经被B事务更新但是还没提交的字段，此时B回滚了，A读取到的数据是临时且无效的。
	不可重复读：【同一个事务】中，多次读取到的数据不一致
		在同一个事务中A事务读取了一个字段，然后B事务正常【更新】了该字段且提交了，此时B再去读的时候发现数据不一致了。
	幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据
		A事务在一个表中读取了行数之类的，然后B事务在此表中【插入或删除】了一些新的数据，此时A再去读取发现行数变了。
	
如何避免事务的并发问题？
	通过设置事务的隔离级别
	1、READ UNCOMMITTED
	2、READ COMMITTED 可以避免脏读
	3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读
	4、SERIALIZABLE可以避免脏读、不可重复读和幻读，性能较低
	
oracle只支持两种事务隔离级别，读已提交和串行化，默认是【读已提交】
mysql支持四种隔离级别，默认是【不可重复读】

设置隔离级别：
	set session|global  transaction isolation level 隔离级别名;
查看隔离级别：
	select @@tx_isolation;
	
	
视图
含义：理解成一张虚拟的表

视图和表的区别：
		使用方式	占用物理空间
	视图	完全相同	不占用，仅仅保存的是sql逻辑
	表	完全相同	占用

视图一般用作查询

视图的好处：
	1、sql语句提高重用性，效率高
	2、和表实现了分离，提高了安全性

视图的创建
	语法：
		CREATE VIEW 视图名
		AS
		查询语句;
	
视图的增删改查
	1、查看视图的数据 ★
		SELECT * FROM my_v4;
		SELECT * FROM my_v1 WHERE last_name='Partners';
	2、插入视图的数据
		INSERT INTO my_v4(last_name,department_id) VALUES('虚竹',90);
	3、修改视图的数据
		UPDATE my_v4 SET last_name ='梦姑' WHERE last_name='虚竹';
	4、删除视图的数据
		DELETE FROM my_v4;
	
某些视图不能更新
	1、包含以下关键字的sql语句：分组函数、distinct、group by、having、union或者union all
	2、常量视图
	3、Select中包含子查询
	4、join
	5、from一个不能更新的视图
	6、where子句的子查询引用了from子句中的表
	
	视图可以更新也会导致不安全，所以一般会设置视图的权限，可以读不可以更新
	
视图逻辑的更新
	方式一：存在就修改，不存在就创建
		CREATE OR REPLACE VIEW test_v7
		AS
		SELECT last_name FROM employees
		WHERE employee_id>100;
	方式二：仅修改
		ALTER VIEW test_v7
		AS
		SELECT employee_id FROM employees;
		
		SELECT * FROM test_v7;
视图的删除
	DROP VIEW test_v1,test_v2,test_v3;
视图结构的查看	
	DESC test_v7;
	SHOW CREATE VIEW test_v7;


存储过程和方法：类似于java中的方法
好处：提高代码的重用性，简化操作

存储过程
一般用作增删改，且是大数据量
含义：一组经过预先编译的sql语句的集合，理解成批处理语句
好处：
	1、提高了sql语句的重用性，减少了开发程序员的压力
	2、提高了效率，第一次调用过了就不会再次编译，可以直接用
	3、减少了传输次数，减少了和数据库服务器的连接次数
分类：
	1、无返回无参
	2、仅仅带in类型，无返回有参
	3、仅仅带out类型，有返回无参
	4、既带in又带out，有返回有参
	5、带inout，有返回有参
	注意：in、out、inout都可以在一个存储过程中带多个
创建存储过程
语法：
	create procedure 存储过程名(in|out|inout 参数名  参数类型,...)
	begin
		存储过程体
	end
类似于方法：
	修饰符 返回类型 方法名(参数类型 参数名,...){
		方法体;
	}
	
	1、参数类型包含三部分：参数模式	参数名	参数类型
		参数模式：
			in：该参数只能作为输入（该参数不能做返回值）
			out：该参数只能作为输出（该参数只能做返回值）
			inout：既能做输入又能做输出
	2、如果存储过程体仅仅只有一句话，则begin end可以省略
	3、存储过程体中的每句sql语句的结尾要求必须加分号;这个分号仅仅表示这一条sql结束了
	4、存储过程的结尾需要设置新的结束标记，默认的结束标记是;改了新的结束标记后该会话内的所有结束标记都要用这个新的才可以，就算没在存储过程内也是一样
		delimiter 新的结束标记
		示例：
		delimiter $

		CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)
		BEGIN
			sql语句1;
			sql语句2;
		END $
调用存储过程
	call 存储过程名(实参列表)
案例：插入几条数据，空参
	创建：
		delimiter $
		create procedure myp1()
		begin
			insert into admin(。。。。。。) values(。。。。。。)
		end $
	调用：
		call myp1()$
案例：查询，有参
	创建：
		delimiter $
		create procedure myp2(in beautyName varchar(20))
		begin
			select bo.* from boys bo right join beauty b on bo.id = b.boyfriend_id where b.name = beautyName;
		end $
	调用：
		call myp2('柳岩')$
		
存储过程删除：drop procedure p1;//只能一次删除一个存储过程
查看存储过程：show create procedure p1;
存储过程不能修改
		
函数
创建函数
学过的函数：LENGTH、SUBSTR、CONCAT等
语法：
	CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型
	BEGIN
		函数体
	END

注意：
	1、函数体肯定要有返回值，如果没有会报错
	2、如果return语句没有放在函数体的最后也不会报错，但不建议
	3、函数体中仅有一句话时，则可以省略begin end
	4、使用delimiter语句设置结束标记

调用函数
	SELECT 函数名（实参列表）
	
查看函数：show create function myf3;

函数和存储过程的区别
			关键字		调用语法			返回值			应用场景
	函数		FUNCTION	SELECT 函数()		只能是一个			一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个
	存储过程	PROCEDURE	CALL 存储过程()	可以有0个或多个		一般用于更新，适合做批量插入，批量更新


变量：
	1、系统变量：变量由系统提供，不是用户定义，属于服务器层面
		一、全局变量
			作用域：针对于所有会话（连接）有效，但不能跨重启，重启后就会全部初始化，可以通过修改配置文件解决
				查看所有全局变量
					SHOW GLOBAL VARIABLES;
				查看满足条件的部分系统变量
					SHOW GLOBAL VARIABLES LIKE '%char%';
				查看指定的系统变量的值
					SELECT @@global.autocommit;
				为某个系统变量赋值
					SET @@global.autocommit=0;
					SET GLOBAL autocommit=0;
		
		二、会话变量，默认就是会话级别。
			作用域：针对于当前会话（连接）有效
				查看所有会话变量
					SHOW SESSION VARIABLES;
				查看满足条件的部分会话变量
					SHOW SESSION VARIABLES LIKE '%char%';
				查看指定的会话变量的值
					SELECT @@autocommit;
					SELECT @@session.tx_isolation;
				为某个会话变量赋值
					SET @@session.tx_isolation='read-uncommitted';
					SET SESSION tx_isolation='read-committed';
	2、自定义变量
		一、用户变量
			作用域：针对于当前会话（连接）有效，应用在任何地方，也就是begin end里面或外面
			声明并初始化：
				SET @变量名=值;
				SET @变量名:=值;
				SELECT @变量名:=值;
			赋值：
				方式一：一般用于赋简单的值
					SET @变量名=值;
					SET @变量名:=值;
					SELECT @变量名:=值;
				方式二：一般用于赋表 中的字段值
					SELECT 字段名或表达式 INTO 变量  FROM 表;
			使用：
				select @变量名;
		
		二、局部变量
			作用域：仅仅在定义它的begin end中有效
			应用在begin end中的第一句话
			声明：
				declare 变量名 类型 【default 值】;
			赋值：
				方式一：一般用于赋简单的值
					SET 变量名=值;
					SET 变量名:=值;
					SELECT @变量名:=值;
				方式二：一般用于赋表 中的字段值
					SELECT 字段名或表达式 INTO 变量  FROM 表;
			使用：
				select 变量名
	
		二者的区别：
						作用域					定义位置				语法
			用户变量		当前会话					会话的任何地方			加@符号，不用指定类型
			局部变量		定义它的BEGIN END中 		BEGIN END的第一句话		一般不用加@,需要指定类型


流程控制结构
	1、顺序结构，程序从上往下依次执行
	2、分支结构，程序从两条或多条路径中选择一条去执行
	3、循环结构，程序在满足一定条件的基础上，重复执行一段代码
分支
	一、if函数
		语法：if(条件，值1，值2)
		特点：可以用在任何位置
	二、case语句
		语法：
			情况一：类似于switch
				case 表达式
				when 值1 then 结果1或语句1(如果是语句，需要加分号) 
				when 值2 then 结果2或语句2(如果是语句，需要加分号)
				...
				else 结果n或语句n(如果是语句，需要加分号)
				end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）
			情况二：类似于多重if
				case 
				when 条件1 then 结果1或语句1(如果是语句，需要加分号) 
				when 条件2 then 结果2或语句2(如果是语句，需要加分号)
				...
				else 结果n或语句n(如果是语句，需要加分号)
				end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）
		特点：可以用在任何位置
			else可以省略，如果else省略了，并且所有when条件都不满足，则返回null
			
	三、if elseif语句
		语法：
			if 情况1 then 语句1;
			elseif 情况2 then 语句2;
			...
			else 语句n;
			end if;
		特点：只能用在begin end中！！！！！！！！！！！！！！！
			else可以省略，如果else省略了，并且所有when条件都不满足，则返回null
	三者比较：
					应用场合
		if函数		简单双分支
		case结构		等值判断 的多分支
		if结构		区间判断 的多分支

循环
	分类：while，loop，repeat
	循环控制：iterate类似于continue，继续，结束本次循环，继续下一次
			leave类似于break，跳出，结束当前所在的循环
	语法：标签：给循环起了名字
		while：
			【标签：】WHILE 循环条件  DO
				循环体
				END WHILE 【标签】;
		loop：可以模拟简单的死循环
			【标签：】loop
				循环体
				END loop 【标签】;
		repeat：
			【标签：】repeat
				循环体
				until 结束循环的条件 
				END repeat 【标签】;
						
	特点：
		只能放在BEGIN END里面！！！！！！！！！！！！！！！
		如果要搭配leave跳转语句，需要使用标签，否则可以不用标签
		leave类似于java中的break语句，跳出所在循环！！！
