依赖：scope的取值有compile、runtime、test、provided、system和import。
	compile：这是依赖项的默认作用范围，即当没有指定依赖项的scope时默认使用compile。compile范围内的依赖项在所有情况下都是有效的，包括运行、测试和编译时。
	runtime：表示该依赖项只有在运行时才是需要的，在编译的时候不需要。这种类型的依赖项将在运行和test的类路径下可以访问。
	test：表示该依赖项只对测试时有用，包括测试代码的编译和运行，对于正常的项目运行是没有影响的。如：junit
	provided：表示该依赖项将由JDK或者运行容器在运行时提供，也就是说由Maven提供的该依赖项我们只有在编译和测试时才会用到，而在运行时将由JDK或者运行容器提供。如：servlet-api
	system：当scope为system时，表示该依赖项是我们自己提供的，不需要Maven到仓库里面去找。
		指定scope为system需要与另一个属性元素systemPath一起使用，它表示该依赖项在当前系统的位置，使用的是绝对路径。比如官网给出了一个关于使用JDK的tools.jar的例子：
	import：
	
依赖传递：
	只有conpile的可以传递
	依赖原则：
		1：如果依赖路径的长度不同，则“短路优先”：
        	A—>B—>C—>D—>E—>X(version 0.0.1)
         	A—>F—>X(version 0.0.2)
        	 则A依赖于X(version 0.0.2)。
     	2：依赖路径长度相同情况下，则“先声明优先”：
         	A—>E—>X(version 0.0.1)
         	A—>F—>X(version 0.0.2)
			则在项目A的<depencies></depencies>中，E、F那个在先则A依赖哪条路径的X。

生命周期：
	maven的核心程序只定义了抽象的生命周期，但具体的工作必须由特定的插件来完成，插件并不在maven程序中
	所以执行maven命令的时候需要用到插件时，maven核心程序会到本地仓库找，找不到再去远程仓库下，这个jar是一个道理，如果下不到，则构建失败
	一般情况下，mvn clean install 这样的命令是通用的
	Maven有三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，初学者容易将Maven的生命周期看成一个整体，其实不然。
	如下：
		Clean Lifecycle 在进行真正的构建之前进行一些清理工作。将以前编译得到的字节码删除，为下一次编译做准备
		Default Lifecycle 构建的核心部分，编译，测试，打包，部署等等。
		Site Lifecycle 生成项目报告，站点，发布站点。
	。。可以仅仅调用clean来清理工作目录，仅仅调用site来生成站点。当然也可以直接运行 mvn clean install site 运行所有这三套生命周期。
	。。每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行mvn clean ，这个的clean是Clean生命周期的一个阶段。
	
	Clean生命周期一共包含了三个阶段：
		pre-clean  执行一些需要在clean之前完成的工作
		clean  移除所有上一次构建生成的文件
		post-clean  执行一些需要在clean之后立刻完成的工作
	。。mvn clean 中的clean就是上面的clean，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，
	也就是说，mvn clean 等同于 mvn pre-clean clean ，如果我们运行 mvn post-clean ，那么 pre-clean，clean 都会被运行。
	。。clean也算是一种习惯吧，它可以避免一些错误的发生。clean的主要功能是删除maven生成的target文件，
	如果不执行clean，而直接install的话，其过程中生成的如.class文件就会覆盖原来的文件，这在一般情况下是没有问题的。
	但是，比如你在源文件删除了一个java，结果没有clean，则它依然存在与target中，可能会对最终的结果造成影响。
	
	Default生命周期，绝大部分工作都发生在这个生命周期中，一些比较重要和常用的阶段：
		validate
		generate-sources
		process-sources
		generate-resources
		process-resources     复制并处理资源文件，至目标目录，准备打包。
		compile     编译项目的源代码。
		process-classes
		generate-test-sources 
		process-test-sources 
		generate-test-resources
		process-test-resources     复制并处理资源文件，至目标测试目录。
		test-compile     编译测试源代码。
		process-test-classes
		test     使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。
		prepare-package
		package     接受编译好的代码，打包成可发布的格式，如 JAR 。
		pre-integration-test
		integration-test
		post-integration-test
		verify
		install     将包安装至本地仓库，以让其它项目依赖。
		deploy     将最终的包复制到远程的仓库，以让其它开发人员与项目共享。
	。。运行任何一个阶段的时候，它前面的所有阶段都会被运行，这也就是为什么我们运行mvn install 的时候，代码会被编译，测试，打包。
	
	Site生命周期的各个阶段：
		pre-site     执行一些需要在生成站点文档之前完成的工作
		site    生成项目的站点文档
		post-site     执行一些需要在生成站点文档之后完成的工作，并且为部署做准备
		site-deploy     将生成的站点文档部署到特定的服务器上
		
		